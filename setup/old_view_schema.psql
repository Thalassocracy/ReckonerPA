CREATE MATERIALIZED VIEW reckoner.match_aggregate AS
SELECT
    a.match_id,
    AVG(eco10 / 10.0) as eco_mean,
    VAR_SAMP(eco10 / 10.0) as eco_var,
    AVG(size) as team_size_mean,
    VAR_SAMP(size) as team_size_var,
    COUNT(DISTINCT(t.team_num)) as team_count,
    EVERY(alpha IS NOT NULL AND beta IS NOT NULL) as scored,

    (EVERY(player_id != '-1') AND EVERY(player_id != 'Idle') AND EVERY(player_id != 'Idle QBE')) as players_valid

FROM reckoner.armies AS a
INNER JOIN reckoner.teams AS t
ON (a.match_id, a.team_num) = (t.match_id, t.team_num)
GROUP BY a.match_id;
CREATE INDEX match_aggregate_index ON reckoner.match_aggregate(match_id);


CREATE MATERIALIZED VIEW reckoner.valid_win AS 
SELECT
    match_id, 
    COUNT(*) as winner_count
FROM reckoner.teams
WHERE win
GROUP BY match_id;
CREATE INDEX match_ag

CREATE VIEW reckoner.score_queue AS
SELECT
    m.match_id
FROM reckoner.matches AS m
INNER JOIN reckoner.match_aggregate AS a
ON m.match_id = a.match_id
WHERE NOT scored 
LIMIT 2500;

CREATE VIEW reckoner.score_queue_2 AS
SELECT
    match_id
FROM reckoner.armies a
INNER JOIN (
    SELECT player_type, player_id
    FROM reckoner.armies
    INNER JOIN (
        SELECT match_id
        FROM reckoner.matches m
        INNER 
 (player_type, player_id) IN
(SELECT player_type, player_id
FROM reckoner.armies
WHERE match_id IN (
    SELECT match_id FROM reckoner.matches 
    LIMIT 2500));

SELECT
    *
FROM reckoner.armies
WHERE (player_type, player_id) IN
(SELECT player_type, player_id
FROM reckoner.armies
WHERE match_id IN (
    SELECT match_id FROM reckoner.matches 
    LIMIT 2500));

SELECT player_type, player_id
FROM reckoner.armies
WHERE match_id IN (
    SELECT match_id FROM reckoner.matches 
    LIMIT 2500);

SELECT * FROM reckoner.matchrows3 WHERE (player_type, player_id) IN (
SELECT player_type, player_id
FROM reckoner.armies a
INNER JOIN (
    SELECT match_id FROM reckoner.matches 
    LIMIT 2500) s 
    ON s.match_id = a.match_id);

SELECT * FROM reckoner.matchrows3 WHERE (player_type, player_id) IN (
    ('pa inc', '4485396904231530952'), ('pa inc', '8665259548474200874'));

CREATE MATERIALIZED VIEW reckoner.real_player_ids AS
SELECT 
    match_id,
    player_num,
    main_player_type as player_type,
    main_player_id as player_id
FROM reckoner.armies
INNER JOIN reckoner.smurfs 
ON (alt_player_type, alt_player_id) = (player_type, player_id)
UNION ALL
SELECT 
    match_id,
    player_num,
    player_type,
    player_id
FROM reckoner.armies
WHERE NOT EXISTS (
    SELECT * FROM reckoner.smurfs
    WHERE player_type = alt_player_type
    AND player_id = alt_player_id
);
CREATE INDEX real_player_ids_index ON reckoner.real_player_ids(match_id, player_num);

CREATE MATERIALIZED VIEW reckoner.valid_win

CREATE VIEW reckoner.matchrows AS
SELECT
    a.match_id,
    time_start,
    titans,
    ranked,
    tourney,
    all_dead,

    a.team_num,
    win,
    shared,
    size as team_size,

    b.player_num,
    username,
    alpha,
    beta,
    win_chance,
    (eco10 / 10.0) as eco,

    d.eco_mean,
    eco_var,
    team_size_mean,
    team_size_var,
    team_count,
    scored,

    f.player_type,
    f.player_id
FROM reckoner.teams a
INNER JOIN  reckoner.armies b
ON (a.match_id, a.team_num) = (b.match_id, b.team_num)
INNER JOIN reckoner.matches c
ON (a.match_id) = (c.match_id)
INNER JOIN reckoner.match_aggregate d
ON (c.match_id) = (d.match_id)
INNER JOIN (
    SELECT match_id, COUNT(*) as winner_count
    FROM reckoner.teams
    WHERE win
    GROUP BY match_id) e 
ON e.match_id = c.match_id
INNER JOIN reckoner.real_player_ids f
ON (b.match_id, b.player_num) = (f.match_id, f.player_num)
WHERE team_count > 1 AND players_valid AND (all_dead or e.winner_count = 1) AND NOT sandbox;



CREATE VIEW reckoner.matchrowtest AS
SELECT
    a.match_id,
    time_start,
    titans,
    ranked,
    tourney,
    all_dead,

    a.team_num,
    win,
    shared,
    size as team_size,

    b.player_num,
    username,
    alpha,
    beta,
    win_chance,
    (eco10 / 10.0) as eco,

    d.eco_mean,
    eco_var,
    team_size_mean,
    team_size_var,
    team_count,
    scored,

    f.player_type,
    f.player_id
FROM reckoner.teams a
INNER JOIN  reckoner.armies b
ON (a.match_id, a.team_num) = (b.match_id, b.team_num)
INNER JOIN reckoner.matches c
ON (a.match_id) = (c.match_id)
INNER JOIN reckoner.match_aggregate d
ON (c.match_id) = (d.match_id)
INNER JOIN reckoner.real_player_ids f
ON (b.match_id, b.player_num) = (f.match_id, f.player_num)
WHERE team_count > 1 AND players_valid AND NOT sandbox
AND (f.player_type, f.player_id) IN (('pa inc', '4485396904231530952'), ('pa inc', '8665259548474200874'));

CREATE VIEW reckoner.matchrows2 AS
SELECT
    a.match_id,
    time_start,
    titans,
    ranked,
    tourney,
    all_dead,

    a.team_num,
    win,
    shared,
    size as team_size,

    b.player_num,
    username,
    alpha,
    beta,
    win_chance,
    (eco10 / 10.0) as eco,

    d.eco_mean,
    eco_var,
    team_size_mean,
    team_size_var,
    team_count,
    scored,

    f.player_type,
    f.player_id
FROM reckoner.teams a
INNER JOIN  reckoner.armies b
ON (a.match_id, a.team_num) = (b.match_id, b.team_num)
INNER JOIN reckoner.matches c
ON (a.match_id) = (c.match_id)
INNER JOIN reckoner.match_aggregate d
ON (c.match_id) = (d.match_id)
INNER JOIN reckoner.real_player_ids f
ON (b.match_id, b.player_num) = (f.match_id, f.player_num)
WHERE team_count > 1 AND players_valid AND NOT sandbox;

CREATE MATERIALIZED VIEW reckoner.matchrows3 AS
SELECT
    a.match_id,
    time_start,
    titans,
    ranked,
    tourney,
    all_dead,

    a.team_num,
    win,
    shared,
    size as team_size,

    b.player_num,
    username,
    alpha,
    beta,
    win_chance,
    (eco10 / 10.0) as eco,

    d.eco_mean,
    eco_var,
    team_size_mean,
    team_size_var,
    team_count,
    scored,

    f.player_type,
    f.player_id
FROM reckoner.teams a
INNER JOIN  reckoner.armies b
ON (a.match_id, a.team_num) = (b.match_id, b.team_num)
INNER JOIN reckoner.matches c
ON (a.match_id) = (c.match_id)
INNER JOIN reckoner.match_aggregate d
ON (c.match_id) = (d.match_id)
INNER JOIN (
    SELECT match_id, COUNT(*) as winner_count
    FROM reckoner.teams
    WHERE win
    GROUP BY match_id) e 
ON e.match_id = c.match_id
INNER JOIN reckoner.real_player_ids f
ON (b.match_id, b.player_num) = (f.match_id, f.player_num)
WHERE team_count > 1 AND players_valid AND (all_dead or e.winner_count = 1) AND NOT sandbox;
CREATE INDEX matchrows3_match_id_index ON reckoner.matchrows3(match_id);
CREATE INDEX matchrows3_player_index ON reckoner.matchrows3(player_type, player_id);

CREATE VIEW reckoner.full_merged_armies AS
SELECT 
    match_id,
    player_num,
    username,
    alpha,
    beta,
    win_chance,
    faction,
    (eco10 / 10.0) as eco,
    team_num,
    commanders,
    main_player_type as player_type,
    main_player_id as player_id
FROM reckoner.armies
INNER JOIN reckoner.smurfs 
ON (alt_player_type, alt_player_id) = (player_type, player_id)
UNION ALL
SELECT 
    match_id,
    player_num,
    username,
    alpha,
    beta,
    win_chance,
    faction,
    (eco10 / 10.0) as eco,
    team_num,
    commanders,
    player_type,
    player_id
FROM reckoner.armies
WHERE NOT EXISTS (
    SELECT * FROM reckoner.smurfs
    WHERE player_type = alt_player_type
    AND player_id = alt_player_id
);

CREATE OR REPLACE VIEW reckoner.full_matchrows AS
SELECT
    a.match_id,
    lobbyid,
    duration,
    time_start,
    time_end,
    titans,
    living,
    patch,
    ranked,
    tourney,
    mod_penalty,
    mods,
    mod_versions,
    dimension_names,
    dimension_values,
    system_name,
    system_info,
    server,
    uberids,
    all_dead,
    source_superstats,
    source_river,
    source_pastats,
    source_corrections,
    source_replayfeed,
    source_recorder,
    source_gamefeed,
    sandbox,

    a.team_num,
    win,
    shared,
    size as team_size,

    player_num,
    username,
    alpha,
    beta,
    win_chance,
    faction,
    eco,
    commanders,
    player_type,
    player_id,

    d.eco_mean,
    eco_var,
    team_size_mean,
    team_size_var,
    team_count,
    scored,
    players_valid

FROM reckoner.teams a
INNER JOIN  full_merged_armies b
ON (a.match_id, a.team_num) = (b.match_id, b.team_num)
INNER JOIN reckoner.matches c
ON (a.match_id) = (c.match_id)
INNER JOIN reckoner.match_aggregate d
ON (c.match_id) = (d.match_id)
INNER JOIN (
    SELECT match_id, COUNT(*) as winner_count
    FROM reckoner.teams
    WHERE win
    GROUP BY match_id) e 
ON e.match_id = c.match_id
WHERE team_count > 1 AND players_valid AND (all_dead or e.winner_count = 1) AND NOT sandbox;

SELECT player_type, player_id, time_start as timestamp, match_id, team_num as team_id
FROM reckoner.matchrows
ORDER BY timestamp ASC;

SELECT player_type, 
    player_id, 
    time_start as timestamp, 
    match_id, 
    team_num as team_id,
    win,
    team_size,
    team_size_mean,
    team_size_var,
    team_count,
    match_id,
    eco,
    eco_mean,
    eco_var,
    all_dead,
    shared,
    titans
FROM reckoner.matchrows
ORDER BY timestamp ASC;

SELECT player_type, 
    player_id, 
    time_start as timestamp, 
    a.match_id, 
    a.team_num as team_id,
    win,
    size as team_size,
    team_size_mean,
    team_size_var,
    team_count,
    eco,
    eco_mean,
    eco_var,
    all_dead,
    shared,
    titans
FROM reckoner.teams a
INNER JOIN  merged_armies b
ON (a.match_id, a.team_num) = (b.match_id, b.team_num)
INNER JOIN reckoner.matches c
ON (a.match_id) = (c.match_id)
INNER JOIN reckoner.match_aggregate d
ON (c.match_id) = (d.match_id)
INNER JOIN (
    SELECT match_id, COUNT(*) as winner_count
    FROM reckoner.teams
    WHERE win
    GROUP BY match_id) e 
ON e.match_id = c.match_id
WHERE team_count > 1 AND players_valid AND (all_dead or e.winner_count = 1) AND NOT sandbox
ORDER BY timestamp ASC;

CREATE INDEX 